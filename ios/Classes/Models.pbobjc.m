// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: models.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "Models.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(CameraAspectRatio);
GPBObjCClassDeclaration(Range);
GPBObjCClassDeclaration(Size_Class);

#pragma mark - ModelsRoot

@implementation ModelsRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - ModelsRoot_FileDescriptor

static GPBFileDescriptor *ModelsRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - CameraInfo

@implementation CameraInfo

@dynamic id_p;
@dynamic facing;

typedef struct CameraInfo__storage_ {
  uint32_t _has_storage_[1];
  CameraInfo_LensFacing facing;
  NSString *id_p;
} CameraInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = Nil,
        .number = CameraInfo_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CameraInfo__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "facing",
        .dataTypeSpecific.enumDescFunc = CameraInfo_LensFacing_EnumDescriptor,
        .number = CameraInfo_FieldNumber_Facing,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CameraInfo__storage_, facing),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CameraInfo class]
                                     rootClass:[ModelsRoot class]
                                          file:ModelsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CameraInfo__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t CameraInfo_Facing_RawValue(CameraInfo *message) {
  GPBDescriptor *descriptor = [CameraInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:CameraInfo_FieldNumber_Facing];
  return GPBGetMessageRawEnumField(message, field);
}

void SetCameraInfo_Facing_RawValue(CameraInfo *message, int32_t value) {
  GPBDescriptor *descriptor = [CameraInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:CameraInfo_FieldNumber_Facing];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - Enum CameraInfo_LensFacing

GPBEnumDescriptor *CameraInfo_LensFacing_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Front\000Back\000External\000";
    static const int32_t values[] = {
        CameraInfo_LensFacing_Front,
        CameraInfo_LensFacing_Back,
        CameraInfo_LensFacing_External,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(CameraInfo_LensFacing)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:CameraInfo_LensFacing_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL CameraInfo_LensFacing_IsValidValue(int32_t value__) {
  switch (value__) {
    case CameraInfo_LensFacing_Front:
    case CameraInfo_LensFacing_Back:
    case CameraInfo_LensFacing_External:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - CameraState

@implementation CameraState

@dynamic zoom;
@dynamic maxZoom;
@dynamic hasRatio, ratio;
@dynamic focusDepth;
@dynamic cameraId;
@dynamic autoFocus;
@dynamic flash;
@dynamic exposure;
@dynamic whiteBalance;
@dynamic playSoundOnCapture;
@dynamic useCamera2;
@dynamic orientation;
@dynamic hasPreviewSize, previewSize;
@dynamic supportedRatioArray, supportedRatioArray_Count;
@dynamic supportedPreviewFpsArray, supportedPreviewFpsArray_Count;

typedef struct CameraState__storage_ {
  uint32_t _has_storage_[1];
  float zoom;
  float maxZoom;
  float focusDepth;
  CameraState_Flash flash;
  float exposure;
  CameraState_WhiteBalance whiteBalance;
  CameraState_Orientation orientation;
  CameraAspectRatio *ratio;
  NSString *cameraId;
  Size_Class *previewSize;
  NSMutableArray *supportedRatioArray;
  NSMutableArray *supportedPreviewFpsArray;
} CameraState__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "zoom",
        .dataTypeSpecific.clazz = Nil,
        .number = CameraState_FieldNumber_Zoom,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CameraState__storage_, zoom),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "maxZoom",
        .dataTypeSpecific.clazz = Nil,
        .number = CameraState_FieldNumber_MaxZoom,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CameraState__storage_, maxZoom),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "ratio",
        .dataTypeSpecific.clazz = GPBObjCClass(CameraAspectRatio),
        .number = CameraState_FieldNumber_Ratio,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(CameraState__storage_, ratio),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "focusDepth",
        .dataTypeSpecific.clazz = Nil,
        .number = CameraState_FieldNumber_FocusDepth,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(CameraState__storage_, focusDepth),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "cameraId",
        .dataTypeSpecific.clazz = Nil,
        .number = CameraState_FieldNumber_CameraId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(CameraState__storage_, cameraId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "autoFocus",
        .dataTypeSpecific.clazz = Nil,
        .number = CameraState_FieldNumber_AutoFocus,
        .hasIndex = 5,
        .offset = 6,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "flash",
        .dataTypeSpecific.enumDescFunc = CameraState_Flash_EnumDescriptor,
        .number = CameraState_FieldNumber_Flash,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(CameraState__storage_, flash),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "exposure",
        .dataTypeSpecific.clazz = Nil,
        .number = CameraState_FieldNumber_Exposure,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(CameraState__storage_, exposure),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "whiteBalance",
        .dataTypeSpecific.enumDescFunc = CameraState_WhiteBalance_EnumDescriptor,
        .number = CameraState_FieldNumber_WhiteBalance,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(CameraState__storage_, whiteBalance),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "playSoundOnCapture",
        .dataTypeSpecific.clazz = Nil,
        .number = CameraState_FieldNumber_PlaySoundOnCapture,
        .hasIndex = 10,
        .offset = 11,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "useCamera2",
        .dataTypeSpecific.clazz = Nil,
        .number = CameraState_FieldNumber_UseCamera2,
        .hasIndex = 12,
        .offset = 13,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "orientation",
        .dataTypeSpecific.enumDescFunc = CameraState_Orientation_EnumDescriptor,
        .number = CameraState_FieldNumber_Orientation,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(CameraState__storage_, orientation),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "previewSize",
        .dataTypeSpecific.clazz = GPBObjCClass(Size_Class),
        .number = CameraState_FieldNumber_PreviewSize,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(CameraState__storage_, previewSize),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "supportedRatioArray",
        .dataTypeSpecific.clazz = GPBObjCClass(CameraAspectRatio),
        .number = CameraState_FieldNumber_SupportedRatioArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(CameraState__storage_, supportedRatioArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "supportedPreviewFpsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(Range),
        .number = CameraState_FieldNumber_SupportedPreviewFpsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(CameraState__storage_, supportedPreviewFpsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CameraState class]
                                     rootClass:[ModelsRoot class]
                                          file:ModelsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CameraState__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\013\003\246\201\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t CameraState_Flash_RawValue(CameraState *message) {
  GPBDescriptor *descriptor = [CameraState descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:CameraState_FieldNumber_Flash];
  return GPBGetMessageRawEnumField(message, field);
}

void SetCameraState_Flash_RawValue(CameraState *message, int32_t value) {
  GPBDescriptor *descriptor = [CameraState descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:CameraState_FieldNumber_Flash];
  GPBSetMessageRawEnumField(message, field, value);
}

int32_t CameraState_WhiteBalance_RawValue(CameraState *message) {
  GPBDescriptor *descriptor = [CameraState descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:CameraState_FieldNumber_WhiteBalance];
  return GPBGetMessageRawEnumField(message, field);
}

void SetCameraState_WhiteBalance_RawValue(CameraState *message, int32_t value) {
  GPBDescriptor *descriptor = [CameraState descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:CameraState_FieldNumber_WhiteBalance];
  GPBSetMessageRawEnumField(message, field, value);
}

int32_t CameraState_Orientation_RawValue(CameraState *message) {
  GPBDescriptor *descriptor = [CameraState descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:CameraState_FieldNumber_Orientation];
  return GPBGetMessageRawEnumField(message, field);
}

void SetCameraState_Orientation_RawValue(CameraState *message, int32_t value) {
  GPBDescriptor *descriptor = [CameraState descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:CameraState_FieldNumber_Orientation];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - Enum CameraState_Flash

GPBEnumDescriptor *CameraState_Flash_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "FlashOn\000FlashAuto\000FlashOff\000FlashTorch\000Fl"
        "ashRedEye\000";
    static const int32_t values[] = {
        CameraState_Flash_FlashOn,
        CameraState_Flash_FlashAuto,
        CameraState_Flash_FlashOff,
        CameraState_Flash_FlashTorch,
        CameraState_Flash_FlashRedEye,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(CameraState_Flash)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:CameraState_Flash_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL CameraState_Flash_IsValidValue(int32_t value__) {
  switch (value__) {
    case CameraState_Flash_FlashOn:
    case CameraState_Flash_FlashAuto:
    case CameraState_Flash_FlashOff:
    case CameraState_Flash_FlashTorch:
    case CameraState_Flash_FlashRedEye:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum CameraState_Orientation

GPBEnumDescriptor *CameraState_Orientation_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "OrientationAuto\000OrientationLeft\000Orientat"
        "ionRight\000OrientationUp\000OrientationDown\000";
    static const int32_t values[] = {
        CameraState_Orientation_OrientationAuto,
        CameraState_Orientation_OrientationLeft,
        CameraState_Orientation_OrientationRight,
        CameraState_Orientation_OrientationUp,
        CameraState_Orientation_OrientationDown,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(CameraState_Orientation)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:CameraState_Orientation_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL CameraState_Orientation_IsValidValue(int32_t value__) {
  switch (value__) {
    case CameraState_Orientation_OrientationAuto:
    case CameraState_Orientation_OrientationLeft:
    case CameraState_Orientation_OrientationRight:
    case CameraState_Orientation_OrientationUp:
    case CameraState_Orientation_OrientationDown:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum CameraState_VideoCodec

GPBEnumDescriptor *CameraState_VideoCodec_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "VideoCodecAppleProRes422\000VideoCodecApple"
        "ProRes4444\000VideoCodecH264\000VideoCodecHvec"
        "\000VideoCodecJpeg\000";
    static const int32_t values[] = {
        CameraState_VideoCodec_VideoCodecAppleProRes422,
        CameraState_VideoCodec_VideoCodecAppleProRes4444,
        CameraState_VideoCodec_VideoCodecH264,
        CameraState_VideoCodec_VideoCodecHvec,
        CameraState_VideoCodec_VideoCodecJpeg,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(CameraState_VideoCodec)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:CameraState_VideoCodec_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL CameraState_VideoCodec_IsValidValue(int32_t value__) {
  switch (value__) {
    case CameraState_VideoCodec_VideoCodecAppleProRes422:
    case CameraState_VideoCodec_VideoCodecAppleProRes4444:
    case CameraState_VideoCodec_VideoCodecH264:
    case CameraState_VideoCodec_VideoCodecHvec:
    case CameraState_VideoCodec_VideoCodecJpeg:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum CameraState_VideoQuality

GPBEnumDescriptor *CameraState_VideoQuality_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "VideoQuality2160P\000VideoQuality1080P\000Vide"
        "oQuality720P\000VideoQuality480P\000VideoQuali"
        "ty43\000VideoQuality288P\000";
    static const int32_t values[] = {
        CameraState_VideoQuality_VideoQuality2160P,
        CameraState_VideoQuality_VideoQuality1080P,
        CameraState_VideoQuality_VideoQuality720P,
        CameraState_VideoQuality_VideoQuality480P,
        CameraState_VideoQuality_VideoQuality43,
        CameraState_VideoQuality_VideoQuality288P,
    };
    static const char *extraTextFormatInfo = "\006\000e\347\205\000\001e\347\205\000\002e\347\204\000\003e\347\204\000\004e\347\201\201\000\005e\347\204\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(CameraState_VideoQuality)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:CameraState_VideoQuality_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL CameraState_VideoQuality_IsValidValue(int32_t value__) {
  switch (value__) {
    case CameraState_VideoQuality_VideoQuality2160P:
    case CameraState_VideoQuality_VideoQuality1080P:
    case CameraState_VideoQuality_VideoQuality720P:
    case CameraState_VideoQuality_VideoQuality480P:
    case CameraState_VideoQuality_VideoQuality43:
    case CameraState_VideoQuality_VideoQuality288P:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum CameraState_VideoStabilization

GPBEnumDescriptor *CameraState_VideoStabilization_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "VideoStabilizationAuto\000VideoStabilizatio"
        "nStandard\000VideoStabilizationOff\000VideoSta"
        "bilizationCinematic\000";
    static const int32_t values[] = {
        CameraState_VideoStabilization_VideoStabilizationAuto,
        CameraState_VideoStabilization_VideoStabilizationStandard,
        CameraState_VideoStabilization_VideoStabilizationOff,
        CameraState_VideoStabilization_VideoStabilizationCinematic,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(CameraState_VideoStabilization)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:CameraState_VideoStabilization_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL CameraState_VideoStabilization_IsValidValue(int32_t value__) {
  switch (value__) {
    case CameraState_VideoStabilization_VideoStabilizationAuto:
    case CameraState_VideoStabilization_VideoStabilizationStandard:
    case CameraState_VideoStabilization_VideoStabilizationOff:
    case CameraState_VideoStabilization_VideoStabilizationCinematic:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum CameraState_WhiteBalance

GPBEnumDescriptor *CameraState_WhiteBalance_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "WhiteBalanceAuto\000WhiteBalanceCloudy\000Whit"
        "eBalanceFluorescent\000WhiteBalanceIncandes"
        "cent\000WhiteBalanceShadow\000WhiteBalanceSunn"
        "y\000";
    static const int32_t values[] = {
        CameraState_WhiteBalance_WhiteBalanceAuto,
        CameraState_WhiteBalance_WhiteBalanceCloudy,
        CameraState_WhiteBalance_WhiteBalanceFluorescent,
        CameraState_WhiteBalance_WhiteBalanceIncandescent,
        CameraState_WhiteBalance_WhiteBalanceShadow,
        CameraState_WhiteBalance_WhiteBalanceSunny,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(CameraState_WhiteBalance)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:CameraState_WhiteBalance_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL CameraState_WhiteBalance_IsValidValue(int32_t value__) {
  switch (value__) {
    case CameraState_WhiteBalance_WhiteBalanceAuto:
    case CameraState_WhiteBalance_WhiteBalanceCloudy:
    case CameraState_WhiteBalance_WhiteBalanceFluorescent:
    case CameraState_WhiteBalance_WhiteBalanceIncandescent:
    case CameraState_WhiteBalance_WhiteBalanceShadow:
    case CameraState_WhiteBalance_WhiteBalanceSunny:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - CameraAspectRatio

@implementation CameraAspectRatio

@dynamic x;
@dynamic y;

typedef struct CameraAspectRatio__storage_ {
  uint32_t _has_storage_[1];
  int32_t x;
  int32_t y;
} CameraAspectRatio__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "x",
        .dataTypeSpecific.clazz = Nil,
        .number = CameraAspectRatio_FieldNumber_X,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CameraAspectRatio__storage_, x),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "y",
        .dataTypeSpecific.clazz = Nil,
        .number = CameraAspectRatio_FieldNumber_Y,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CameraAspectRatio__storage_, y),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CameraAspectRatio class]
                                     rootClass:[ModelsRoot class]
                                          file:ModelsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CameraAspectRatio__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Size_Class

@implementation Size_Class

@dynamic width;
@dynamic height;

typedef struct Size_Class__storage_ {
  uint32_t _has_storage_[1];
  int32_t width;
  int32_t height;
} Size_Class__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "width",
        .dataTypeSpecific.clazz = Nil,
        .number = Size_Class_FieldNumber_Width,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Size_Class__storage_, width),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "height",
        .dataTypeSpecific.clazz = Nil,
        .number = Size_Class_FieldNumber_Height,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Size_Class__storage_, height),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Size_Class class]
                                     rootClass:[ModelsRoot class]
                                          file:ModelsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Size_Class__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    [localDescriptor setupMessageClassNameSuffix:@"_Class"];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Range

@implementation Range

@dynamic min;
@dynamic max;

typedef struct Range__storage_ {
  uint32_t _has_storage_[1];
  int32_t min;
  int32_t max;
} Range__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "min",
        .dataTypeSpecific.clazz = Nil,
        .number = Range_FieldNumber_Min,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Range__storage_, min),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "max",
        .dataTypeSpecific.clazz = Nil,
        .number = Range_FieldNumber_Max,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Range__storage_, max),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Range class]
                                     rootClass:[ModelsRoot class]
                                          file:ModelsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Range__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Point_Class

@implementation Point_Class

@dynamic x;
@dynamic y;

typedef struct Point_Class__storage_ {
  uint32_t _has_storage_[1];
  float x;
  float y;
} Point_Class__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "x",
        .dataTypeSpecific.clazz = Nil,
        .number = Point_Class_FieldNumber_X,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Point_Class__storage_, x),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "y",
        .dataTypeSpecific.clazz = Nil,
        .number = Point_Class_FieldNumber_Y,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Point_Class__storage_, y),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Point_Class class]
                                     rootClass:[ModelsRoot class]
                                          file:ModelsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Point_Class__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    [localDescriptor setupMessageClassNameSuffix:@"_Class"];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
